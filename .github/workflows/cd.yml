name: CD

on:
  release:
    types:
      - published

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: ${{ runner.os }}-pip
      #----------------------------------------------
      #           install and run linters
      #----------------------------------------------
      - name: Install flake8
        run: python -m pip install flake8
      - name: Run flake8
        run: flake8 .

  check_dependencies:
    needs: lint
    runs-on: ubuntu-latest
    outputs:
      modified_files: ${{ steps.changed-files.outputs.modified_files }}
    steps:
      #----------------------------------------------
      #    check-out repo, track modified files
      #   and store list of the modified files in 
      #  modified_files output variable of the job
      #----------------------------------------------
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed files using defaults
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          files: |
            pyproject.toml
      - name: Check whether pyproject.toml was modified
        run: |
          for file in ${{ steps.changed-files.outputs.modified_files }}; do
            echo "$file was modified"
          done

  test:
    needs: check_dependencies
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      #         install & configure poetry
      #----------------------------------------------
      - name: Install Poetry Action
        uses: snok/install-poetry@v1
        with:
          # The Poetry version to install
          version: 1.4.0 # default is latest
          # Whether Poetry should create a virtualenv or not
          virtualenvs-create: true # optional, default is true
          # Whether Poetry should create virtualenvs in the project directory or not
          virtualenvs-in-project: true # optional, default is false
          # Whether to install many packages at once or one by one. This can fix PyPI DNS resolution errors, 
          # but also slows down the installation
          installer-parallel: true # optional, default is true
      #----------------------------------------------
      #     load cached venv if project version 
      #        was changed and cache exists
      #----------------------------------------------
      - name: Load cached venv
        if: ${{ !contains(needs.check_dependencies.outputs.modified_files, 'pyproject.toml') }}
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      #   install dependencies if project version 
      #     was changed or cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: |
          contains(needs.check_dependencies.outputs.modified_files, 'pyproject.toml') ||
          steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      #                run all tests
      #----------------------------------------------
      - name: Run all tests
        run: |
          source .venv/bin/activate
          python -m unittest discover -s tests/ -p "test_*.py"

  publish:
    needs: [check_dependencies, test]
    # Only run this job if project version or dependencies were updated
    if: contains(needs.check_dependencies.outputs.modified_files, 'pyproject.toml')
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
      #----------------------------------------------
      #         install & configure poetry
      #----------------------------------------------
      - name: Install Poetry Action
        uses: snok/install-poetry@v1
        with:
          # The Poetry version to install
          version: 1.4.0 # default is latest
          # Whether Poetry should create a virtualenv or not
          virtualenvs-create: true # optional, default is true
          # Whether Poetry should create virtualenvs in the project directory or not
          virtualenvs-in-project: true # optional, default is false
          # Whether to install many packages at once or one by one. This can fix PyPI DNS resolution errors, 
          # but also slows down the installation
          installer-parallel: true # optional, default is true
      #----------------------------------------------
      #            install dependencies
      #----------------------------------------------
      - name: Install dependencies & build the package
        run: |
          poetry install --no-interaction --no-root
          poetry build
      #----------------------------------------------
      #         publish the package to PyPI
      #----------------------------------------------
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
